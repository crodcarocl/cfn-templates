AWSTemplateFormatVersion: 2010-09-09
Description: |
  Small arq multi AZ with Bastion by Carlos Rodriguez v1.0.1

Parameters:
  BastionInstanceType:
    Description: Instance type for bastion.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
  IpAddress:
    Description: Enter your public IP address.
    Type: String
  EnvironmentName:
    Description: Name of the environment.
    Type: String
    Default: testing
  VpcCIDR:
    Description: VPC IP range (CIDR).
    Type: String
    Default: 172.16.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([1][6]))$
  PublicSubnet1CIDR:
    Description: IP range (CIDR) for public subnet in the first Availability Zone.
    Type: String
    Default: 172.16.1.0/24
  PublicSubnet2CIDR:
    Description:  IP range (CIDR) for public subnet in the second Availability Zone.
    Type: String
    Default: 172.16.3.0/24
  PrivateSubnet1CIDR:
    Description: IP range (CIDR) for private subnet in the first Availability Zone.
    Type: String
    Default: 172.16.2.0/24
  PrivateSubnet2CIDR:
    Description: IP range (CIDR) for private subnet in the second Availability Zone.
    Type: String
    Default: 172.16.4.0/24
  PackageList:
    Description: Enter Packages to install (Space Separated).
    Type: String
    Default: curl wget mlocate ca-certificates openssl vim git wireshark nmap awscli mysql yum-utils nfs-utils cloud-init
  Ec2KeyPair:
    Description: Select Keypair to Assign to EC2 Instances.
    Type: AWS::EC2::KeyPair::KeyName

#Metadata:
  
#Mappings:
  
#Conditions:
  
Resources:
# VPC Creation. 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name 
          Value: !Sub vpc-${EnvironmentName}
        - Key: Environment
          Value: !Ref EnvironmentName

# Networks & Networking.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub igw-${EnvironmentName}
        - Key: Environment
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub eip-${EnvironmentName}-1
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub eip-${EnvironmentName}-2
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
        - Key: Environment
          Value: !Ref EnvironmentName
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ngw-${EnvironmentName}-1
        - Key: Environment
          Value: !Ref EnvironmentName
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ngw-${EnvironmentName}-2
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes AZ1
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes AZ2
        - Key: Environment
          Value: !Ref EnvironmentName
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes AZ1
        - Key: Environment
          Value: !Ref EnvironmentName  
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes AZ2
        - Key: Environment
          Value: !Ref EnvironmentName
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NatGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NatGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

# Securituy Groups
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "bastion-sg"
      GroupDescription: "Security group for bastion"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub '${IpAddress}/32'
      Tags:
        - Key: Name
          Value: bastion-sg
        - Key: Environment
          Value: !Ref EnvironmentName

# Bastion Servers.
  BastionServer1:
    Type: AWS::EC2::Instance
    DependsOn:
      - BastionSecurityGroup
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      ImageId: ami-0cff7528ff583bf9a
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref Ec2KeyPair
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Install httpd
            yum install httpd -y
            service httpd start  
            echo "<html><body><h1>Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.ht
      Tags:
        - Key: Name
          Value: !Sub bastion-${EnvironmentName}-01
        - Key: Environment
          Value: !Ref EnvironmentName
  BastionServer2:
    Type: AWS::EC2::Instance
    DependsOn:
      - BastionSecurityGroup
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      ImageId: ami-0cff7528ff583bf9a
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref Ec2KeyPair
      Monitoring: true
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref BastionSecurityGroup
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Install httpd
            yum install httpd -y
            service httpd start 
            echo "<html><body><h1>Hello from Region ${AWS::Region}<h1></body></html>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: !Sub bastion-${EnvironmentName}-02
        - Key: Environment
          Value: !Ref EnvironmentName

#Transform:
  
Outputs:

  VPC:
    Description: Reference to the created VPC.
    Value: !Ref VPC

  PublicSubnets:
    Description: Reference to the created public subnets.
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: Reference to the created private subnets.
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: Reference to the created public subnets on Availability Zone 1.
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Reference to the created public subnets on Availability Zone 2.
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: Reference to the created private subnets on Availability Zone 1.
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: Reference to the created private subnets on Availability Zone 2.
    Value: !Ref PrivateSubnet2

  BastionSecurityGroup:
    Description: Security Group crated for Bastion security.
    Value: !Ref BastionSecurityGroup
  
  BastionServer1:
    Description: Bastion server AZ1.
    Value: !Ref BastionServer1

  BastionServer2:
    Description: Bastion server AZ2.
    Value: !Ref BastionServer2
